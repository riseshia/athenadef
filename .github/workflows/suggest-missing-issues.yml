name: Suggest Missing Issues

on:
  # schedule:
  #   - cron: '0 0 * * *'  # Every 0:00 UTC
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  analyze-and-suggest:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Analyze project and suggest issues
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          claude_args: "--allowedTools 'Task Bash Read Glob Grep WebFetch WebSearch'"
          prompt: |
            Analyze this Rust project and suggest missing GitHub issues based on:
            1. Specification documents in `docs/` directory
            2. Current source code implementation in `src/`
            3. Existing open issues

            Your task:
            1. Read all specification documents (docs/architecture.md, docs/specification.md, docs/technical-design.md)
            2. Review the current source code structure and implementation
            3. List all existing open issues using: `gh issue list --state open --json number,title,labels,body`
            4. Identify gaps between specifications and current implementation/issues:
               - Missing features from specifications
               - Incomplete implementations that need dedicated issues
               - Technical debt or refactoring opportunities
               - Documentation gaps
               - Testing requirements not covered
            5. For each identified gap, create a new GitHub issue with:
               - Clear, descriptive title
               - Detailed description referencing the specification
               - Appropriate labels (enhancement, bug, documentation, testing, etc.)
               - Priority indication if applicable

            Use these commands:
            ```bash
            # List existing issues
            gh issue list --state open --json number,title,labels,body

            # Create a new issue
            gh issue create --title "Issue title" --body "Detailed description" --label "label1,label2"

            # Add comment to existing issue
            gh issue comment <issue_number> --body "comment"
            ```

            Guidelines:
            - Only suggest issues for concrete, actionable items
            - Avoid duplicating existing open issues
            - Focus on features/tasks mentioned in specifications but not yet tracked
            - Include references to specification documents in issue descriptions
            - Prioritize issues that block other features or are critical for functionality
            - Do NOT create issues for trivial or cosmetic changes

            After analysis, provide a summary comment on what issues were created and why.
