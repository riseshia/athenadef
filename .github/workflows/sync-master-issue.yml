name: Sync Master Issue

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

env:
  MASTER_ISSUE: 1
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  sync-todo-list:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find untracked issues
        id: find_issues
        run: |
          master_issue=${{ env.MASTER_ISSUE }}

          # Get master issue body
          master_body=$(gh issue view $master_issue --json body -q '.body' 2>/dev/null || echo "")

          # Extract already tracked issue numbers from master issue
          tracked_issues=$(echo "$master_body" | grep -oP '#\K\d+' | sort -u)

          # Get all open issues except master issue
          all_open_issues=$(gh issue list \
            --state open \
            --json number \
            --jq ".[] | select(.number != $master_issue) | .number" \
            | sort -u)

          # Find untracked issues
          untracked_issues=""
          for issue_num in $all_open_issues; do
            if ! echo "$tracked_issues" | grep -q "^${issue_num}$"; then
              untracked_issues="$untracked_issues $issue_num"
            fi
          done

          if [ -z "$untracked_issues" ]; then
            echo "âœ… All open issues are already tracked in master issue #$master_issue"
            echo "has_untracked=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "ðŸ“‹ Found untracked issues:$untracked_issues"
          echo "has_untracked=true" >> $GITHUB_OUTPUT
          echo "untracked_issues=$untracked_issues" >> $GITHUB_OUTPUT

      - name: Organize issues with Claude Code
        if: steps.find_issues.outputs.has_untracked == 'true'
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          prompt: |
            Update the master issue #${{ env.MASTER_ISSUE }} with newly found untracked issues.

            Untracked issues: ${{ steps.find_issues.outputs.untracked_issues }}

            Your task:
            1. Read the current master issue todo list
            2. Read details of all untracked issues (title, description, labels)
            3. Analyze dependencies and priorities considering:
               - Bug severity and impact
               - Feature dependencies (some features may need others first)
               - Labels and complexity
               - Relationship with existing todo items
            4. Insert the untracked issues into appropriate positions in the todo list
            5. Update master issue with the reorganized todo list

            Use these commands:
            ```
            # View master issue
            gh issue view ${{ env.MASTER_ISSUE }}

            # View an issue detail
            gh issue view <issue_number>

            # Update master issue
            gh issue edit ${{ env.MASTER_ISSUE }} --body "new body content"

            # Add comment
            gh issue comment ${{ env.MASTER_ISSUE }} --body "comment"
            ```

            Note: Preserve the existing format and structure of the master issue.
